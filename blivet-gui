#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Main
#
# Copyright (C) 2014  Red Hat, Inc.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of
# the GNU General Public License v.2, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY expressed or implied, including the implied warranties of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.  You should have received a copy of the
# GNU General Public License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.  Any Red Hat trademarks that are incorporated in the
# source code or documentation are not subject to the GNU General Public
# License and may only be used or replicated with the express permission of
# Red Hat, Inc.
#
# Red Hat Author(s): Vojtech Trefny <vtrefny@redhat.com>
#
# ---------------------------------------------------------------------------- #

from __future__ import print_function

import sys
import os
import optparse
import signal

import gettext

import gi
gi.require_version("Gtk", "3.0")
gi.require_version("Gdk", "3.0")

from gi.repository import Gtk, Gdk

from blivetgui import __version__, __app_name__
from blivetgui.dialogs.message_dialogs import ErrorDialog
from blivetgui.gui_utils import locate_ui_file, locate_css_file

from subprocess import Popen, PIPE

# ---------------------------------------------------------------------------- #

_ = lambda x: gettext.translation("blivet-gui", fallback=True).gettext(x) if x != "" else ""

# ---------------------------------------------------------------------------- #


class RootCheckWindow(object):
    def __init__(self):
        builder = Gtk.Builder()
        builder.add_from_file(locate_ui_file('root_check_window.ui'))

        win = builder.get_object("root_window")
        win.connect("delete-event", Gtk.main_quit)

        button = builder.get_object("button")
        button.connect("clicked", Gtk.main_quit)

        win.show_all()


def daemon_preexec():
    """ Preexec function for blivet-gui-daemon blocking Ctrl-C kill """
    signal.signal(signal.SIGINT, signal.SIG_IGN)


def parse_options():
    """ Parses command-line arguments passed to blivet_gui
    """

    parser = optparse.OptionParser()
    parser.add_option("-v", "--version", action="store_true", dest="version", default=False,
                      help=_("show version information"))

    (options, _args) = parser.parse_args()

    return options


def main():
    """ Main function, creates a main window instance
    """

    options = parse_options()

    if options.version:
        print(__app_name__, "version", __version__)
        sys.exit(0)

    else:
        p = Popen("pkexec blivet-gui-daemon %d" % os.geteuid(), stdout=PIPE, shell=True, preexec_fn=daemon_preexec)
        output = p.stdout.readline()

        # we expect exactly two parameters
        if len(output.split()) != 2:
            ErrorDialog(parent_window=None, msg=_("Failed to start blivet-gui-daemon."))
            sys.exit(1)

        else:
            sockfile, secret = output.split()

            from blivetgui.blivetgui import BlivetGUI
            from blivetgui.communication.client import BlivetGUIClient

            client = BlivetGUIClient(server_socket=sockfile, secret=secret)
            BlivetGUI(client)

            css_provider = Gtk.CssProvider()
            css_provider.load_from_path(locate_css_file("rectangle.css"))
            screen = Gdk.Screen.get_default()
            style_context = Gtk.StyleContext()
            style_context.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

if __name__ == '__main__':

    signal.signal(signal.SIGINT, signal.SIG_DFL)
    main()
    Gtk.main()
